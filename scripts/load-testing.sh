#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Xray VLESS + Reality —Å–µ—Ä–≤–∏—Å–∞

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL="https://your-domain.com"
API_URL="$BASE_URL:8080"
BOT_URL="$BASE_URL:8001"
PAYMENT_URL="$BASE_URL:8002"
CONCURRENT_USERS=100
TEST_DURATION=300  # 5 –º–∏–Ω—É—Ç
LOG_FILE="/var/log/load-test.log"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
check_service_health() {
    local service_name=$1
    local url=$2
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ $service_name..."
    
    if curl -s -f "$url/health" > /dev/null; then
        log "‚úÖ $service_name –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    else
        log "‚ùå $service_name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints
test_api_endpoints() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints..."
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
    log "–¢–µ—Å—Ç: GET /api/v1/servers"
    response=$(curl -s -w "%{http_code}" -o /dev/null "$API_URL/api/v1/servers")
    if [[ "$response" == "200" ]]; then
        log "‚úÖ GET /api/v1/servers - OK"
    else
        log "‚ùå GET /api/v1/servers - FAIL ($response)"
    fi
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    log "–¢–µ—Å—Ç: POST /api/v1/configs/generate"
    response=$(curl -s -w "%{http_code}" -o /dev/null \
        -X POST \
        -H "Content-Type: application/json" \
        -d '{"user_id": 1, "server_id": 1}' \
        "$API_URL/api/v1/configs/generate")
    if [[ "$response" == "200" || "$response" == "201" ]]; then
        log "‚úÖ POST /api/v1/configs/generate - OK"
    else
        log "‚ùå POST /api/v1/configs/generate - FAIL ($response)"
    fi
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    log "–¢–µ—Å—Ç: GET /api/v1/stats/payments"
    response=$(curl -s -w "%{http_code}" -o /dev/null "$PAYMENT_URL/api/v1/stats/payments")
    if [[ "$response" == "200" ]]; then
        log "‚úÖ GET /api/v1/stats/payments - OK"
    else
        log "‚ùå GET /api/v1/stats/payments - FAIL ($response)"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å Apache Bench
load_test_with_ab() {
    local service_name=$1
    local url=$2
    local endpoint=$3
    local users=$4
    
    log "–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ $service_name —Å $users –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏..."
    
    ab -n 1000 -c "$users" -g "/tmp/ab_${service_name}.tsv" \
        "$url$endpoint" > "/tmp/ab_${service_name}.log" 2>&1
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if grep -q "Failed requests:        0" "/tmp/ab_${service_name}.log"; then
        log "‚úÖ $service_name - –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω—ã"
    else
        failed=$(grep "Failed requests:" "/tmp/ab_${service_name}.log" | awk '{print $3}')
        log "‚ùå $service_name - $failed –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
    fi
    
    # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    avg_time=$(grep "Time per request:" "/tmp/ab_${service_name}.log" | head -1 | awk '{print $4}')
    log "üìä $service_name - —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${avg_time}ms"
}

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Xray —Å–µ—Ä–≤–µ—Ä–æ–≤
test_xray_servers() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Xray —Å–µ—Ä–≤–µ—Ä–æ–≤..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
    servers=$(curl -s "$API_URL/api/v1/servers" | jq -r '.items[].server_id')
    
    for server in $servers; do
        log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: $server"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
        status=$(curl -s "$API_URL/api/v1/servers/$server/status" | jq -r '.status')
        if [[ "$status" == "active" ]]; then
            log "‚úÖ –°–µ—Ä–≤–µ—Ä $server –∞–∫—Ç–∏–≤–µ–Ω"
        else
            log "‚ùå –°–µ—Ä–≤–µ—Ä $server –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
        metrics=$(curl -s "$API_URL/api/v1/servers/$server/metrics")
        cpu_usage=$(echo "$metrics" | jq -r '.[0].cpu_usage // 0')
        memory_usage=$(echo "$metrics" | jq -r '.[0].memory_usage // 0')
        
        log "üìä –°–µ—Ä–≤–µ—Ä $server - CPU: ${cpu_usage}%, Memory: ${memory_usage}%"
    done
}

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
test_database_performance() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
    db_url="postgresql://xray_user:${DB_PASSWORD}@localhost:5432/xray_service"
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    start_time=$(date +%s%N)
    psql "$db_url" -c "SELECT COUNT(*) FROM users;" > /dev/null 2>&1
    end_time=$(date +%s%N)
    duration=$(( (end_time - start_time) / 1000000 ))
    
    log "üìä –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î: ${duration}ms"
    
    # –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    start_time=$(date +%s%N)
    psql "$db_url" -c "SELECT u.*, COUNT(c.id) as config_count FROM users u LEFT JOIN configs c ON u.id = c.user_id GROUP BY u.id;" > /dev/null 2>&1
    end_time=$(date +%s%N)
    duration=$(( (end_time - start_time) / 1000000 ))
    
    log "üìä –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î: ${duration}ms"
}

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis
test_redis_performance() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Redis..."
    
    # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
    start_time=$(date +%s%N)
    redis-cli set "test_key_$(date +%s)" "test_value" > /dev/null
    end_time=$(date +%s%N)
    duration=$(( (end_time - start_time) / 1000000 ))
    
    log "üìä –ó–∞–ø–∏—Å—å –≤ Redis: ${duration}ms"
    
    # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
    start_time=$(date +%s%N)
    redis-cli get "test_key_$(date +%s)" > /dev/null
    end_time=$(date +%s%N)
    duration=$(( (end_time - start_time) / 1000000 ))
    
    log "üìä –ß—Ç–µ–Ω–∏–µ –∏–∑ Redis: ${duration}ms"
}

# –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
monitor_resources() {
    log "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    # CPU
    cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | awk -F'%' '{print $1}')
    log "üìä CPU usage: ${cpu_usage}%"
    
    # Memory
    memory_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    log "üìä Memory usage: ${memory_usage}%"
    
    # Disk
    disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
    log "üìä Disk usage: ${disk_usage}%"
    
    # Network connections
    connections=$(netstat -an | grep :443 | wc -l)
    log "üìä Active connections: $connections"
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
generate_report() {
    local report_file="/tmp/load-test-report-$(date +%Y%m%d-%H%M%S).txt"
    
    {
        echo "=== Load Test Report ==="
        echo "–î–∞—Ç–∞: $(date)"
        echo "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: $CONCURRENT_USERS –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        echo "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: $TEST_DURATION —Å–µ–∫—É–Ω–¥"
        echo ""
        
        echo "=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ==="
        echo "API Endpoints:"
        cat /tmp/ab_xray-manager.log | grep -E "(Failed requests|Time per request|Requests per second)"
        echo ""
        
        echo "Payment Service:"
        cat /tmp/ab_payment-service.log | grep -E "(Failed requests|Time per request|Requests per second)"
        echo ""
        
        echo "=== –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã ==="
        echo "CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}')"
        echo "Memory: $(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')%"
        echo "Disk: $(df / | tail -1 | awk '{print $5}')"
        echo "Connections: $(netstat -an | grep :443 | wc -l)"
        
    } > "$report_file"
    
    log "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $report_file"
    echo "$report_file"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "–ù–∞—á–∞–ª–æ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    check_service_health "Xray Manager" "$API_URL" || exit 1
    check_service_health "Telegram Bot" "$BOT_URL" || exit 1
    check_service_health "Payment Service" "$PAYMENT_URL" || exit 1
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints
    test_api_endpoints
    
    # –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    load_test_with_ab "xray-manager" "$API_URL" "/api/v1/servers" "$CONCURRENT_USERS"
    load_test_with_ab "payment-service" "$PAYMENT_URL" "/api/v1/stats/payments" "$CONCURRENT_USERS"
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Xray —Å–µ—Ä–≤–µ—Ä–æ–≤
    test_xray_servers
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    test_database_performance
    test_redis_performance
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
    monitor_resources
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    report_file=$(generate_report)
    
    log "–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    log "–û—Ç—á–µ—Ç: $report_file"
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    rm -f /tmp/ab_*.log /tmp/ab_*.tsv
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
